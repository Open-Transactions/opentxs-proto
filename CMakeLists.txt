# Copyright (c) 2018 The Open-Transactions developers
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

cmake_minimum_required(VERSION 2.8.12)
project(opentxs-proto)
include(GNUInstallDirs)

if(NOT ANDROID)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM LAST)
find_package(Git)
if(GIT_FOUND)
    execute_process(COMMAND git "describe" OUTPUT_VARIABLE GIT_VERSION WORKING_DIRECTORY ${CMAKE_SOURCE_DIR} OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(REGEX REPLACE "^([0-9]+)\\..*" "\\1" VERSION_MAJOR "${GIT_VERSION}")
    string(REGEX REPLACE "^${VERSION_MAJOR}\\.([0-9]+).*" "\\1" VERSION_MINOR "${GIT_VERSION}")
    string(REGEX REPLACE "^${VERSION_MAJOR}\\.${VERSION_MINOR}\\.([0-9]+).*" "\\1" VERSION_BUGFIX "${GIT_VERSION}")
    string(REGEX REPLACE "^${VERSION_MAJOR}\\.${VERSION_MINOR}\\.${VERSION_BUGFIX}-([0-9]+)-.*" "\\1" VERSION_NEW_COMMITS "${GIT_VERSION}")
    string(REGEX REPLACE "^${VERSION_MAJOR}\\.${VERSION_MINOR}\\.${VERSION_BUGFIX}-${VERSION_NEW_COMMITS}-(.*)" "\\1" VERSION_SHA1 "${GIT_VERSION}")
    if("${VERSION_NEW_COMMITS}" STREQUAL "${GIT_VERSION}")
        set(VERSION_STRING "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUGFIX}")
        set(VERSION_NEW_COMMITS "")
        set(VERSION_SHA1 "")
    else()
        set(VERSION_STRING "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_BUGFIX}-${VERSION_NEW_COMMITS}-${VERSION_SHA1}")
    endif()
    if ("${VERSION_STRING}" STREQUAL "..")
        message(FATAL_ERROR "Version string missing. Did you git clone using the --depth parameter?")
    endif()
else()
  message(FATAL_ERROR "Git not found.")
endif()
endif() # NOT ANDROID

if(IOS_PLATFORM)
  set(CMAKE_MACOSX_RPATH 1)
  add_definitions(-DIOS)
endif()

#-----------------------------------------------------------------------------
# Options for building

if(ANDROID OR IOS)
  option(BUILD_TESTS         "Build the unit tests." OFF)
else()
  option(BUILD_TESTS         "Build the unit tests." ON)
endif()

option(BUILD_VERBOSE       "Verbose build output." ON)
option(USE_CCACHE          "Use ccache." OFF)
option(OT_SANITIZE         "Enable sanitize options" ON)

option(BUILD_SHARED_LIBS   "Build shared libraries." ON)

option(JAVA                "Build with Java binding" OFF)
option(JAVASCRIPT          "Build with Javascript binding" OFF)
option(PYTHON3             "Build with Python3 binding" OFF)
option(PYTHON2             "Build with Python2 binding" OFF)
option(PYTHON              "Build with default Python binding" OFF)
set(PYTHON_DIST         "/usr/local/src" CACHE STRING "foo")

set(PACKAGE_CONTACT        ""                             CACHE <TYPE>  "Package Maintainer")
set(PACKAGE_VENDOR         "Open Transactions Developers" CACHE <TYPE>  "Package Vendor")

if(BUILD_VERBOSE)
  set(CMAKE_VERBOSE_MAKEFILE true)
endif()

#-----------------------------------------------------------------------------
# Python

if (PYTHON)
  cmake_minimum_required(VERSION 3.4 FATAL_ERROR)
endif()

#-----------------------------------------------------------------------------
# Collect all binaries into bin subdirectory

set(LIBRARY_OUTPUT_PATH  ${CMAKE_CURRENT_BINARY_DIR}/lib)


#-----------------------------------------------------------------------------
# Check which compiler to use

INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG(-std=c++17 HAVE_STD17)

if(HAVE_STD17)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z")
endif()

if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU)
  set(GCC_WARN_FLAGS "-Wno-attributes -Wnoexcept -Wstrict-null-sentinel -Wlogical-op")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

  if(ANDROID)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions -frtti")
  endif()
elseif(${CMAKE_CXX_COMPILER_ID} MATCHES Clang)
  set(CMAKE_COMPILER_IS_CLANGXX 1)

  if(APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} -stdlib=libc++")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
  endif()
endif()

if(BUILD_SHARED_LIBS)
  # Windows would complain about unknown flag -fPIC
  if(NOT WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
  endif()
endif()

if(WIN32)
  add_definitions(-D_UNICODE)
else()
  set(PEDANTIC_CXX_FLAGS "-Wall -Werror -Wextra -pedantic -Wno-missing-braces -Wcast-align -Wctor-dtor-privacy -Wdisabled-optimization -Winit-self -Wmissing-include-dirs -Wswitch-default -Wold-style-cast -Woverloaded-virtual -Wmissing-declarations -Wno-deprecated-declarations -Wno-unused-parameter -Wno-old-style-cast -Wunused-macros -Wundef -Wformat=2 -Wno-format-nonliteral -Wno-disabled-optimization ${GCC_WARN_FLAGS}")
endif()

if(ANDROID)
  set(PEDANTIC_CXX_FLAGS "${PEDANTIC_CXX_FLAGS} -Wno-missing-field-initializers")
  add_definitions(-D__STDC_LIMIT_MACROS)
endif()

if(CMAKE_COMPILER_IS_CLANGXX)
  set(PEDANTIC_CXX_FLAGS "${PEDANTIC_CXX_FLAGS} -Wno-unused-parameter -Wno-old-style-cast")
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug" AND OT_SANITIZE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined,address -Wformat -Werror=format-security -Werror=array-bounds -fno-optimize-sibling-calls -fno-omit-frame-pointer")
  set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} -fsanitize=undefined,address")
  if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fuse-ld=gold")
    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} -fuse-ld=gold")
  endif() #GNU LINKER
endif() # DEBUG

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PEDANTIC_CXX_FLAGS}")

message(STATUS "General -------------------------------------")
message(STATUS "opentxs-proto version:  ${VERSION_STRING}")
message(STATUS "CMake version:          ${CMAKE_VERSION}")
message(STATUS "System:                 ${CMAKE_SYSTEM}")
message(STATUS "Processor:              ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "C++ Compiler ID:        ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "C++ Flags:              ${CMAKE_CXX_FLAGS}")
message(STATUS "C++ link flags:         ${CMAKE_CXX_LINK_FLAGS}")
message(STATUS "Verbose:                ${BUILD_VERBOSE}")
message(STATUS "Testing:                ${BUILD_TESTS}")

message(STATUS "Bindings ------------------------------------")
message(STATUS "Java binding:           ${JAVA}")
message(STATUS "Javascript binding:     ${JAVASCRIPT}")
message(STATUS "Python3 binding:        ${PYTHON3}")
message(STATUS "Python2 binding:        ${PYTHON2}")
message(STATUS "Default Python binding: ${PYTHON}")

#-----------------------------------------------------------------------------
# Third party libraries

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

if(NOT OT_BUNDLED_OPENTXS_PROTO)
  if (IOS)    
     set(Protobuf_IOS ${CMAKE_CURRENT_SOURCE_DIR}/deps/protobuf-ios)
     if (NOT EXISTS ${Protobuf_IOS}/protobuf/platform/universal)
       execute_process(COMMAND bash ${Protobuf_IOS}/build-protobuf.sh WORKING_DIRECTORY ${Protobuf_IOS})
     endif()
     if (IOS_PLATFORM MATCHES "SIMULATOR64")
     	set(Protobuf_IOS_PLATFORM iossim_x86_64)
     elseif(IOS_PLATFORM MATCHES "SIMULATOR")
        set(Protobuf_IOS_PLATFORM iossim_386)
     elseif(IOS_PLATFORM MATCHES "OS64")
        set(Protobuf_IOS_PLATFORM ios_arm64)
     elseif(IOS_PLATFORM MATCHES "OS")
        set(Protobuf_IOS_PLATFORM ios_arm7)
     endif()
     
     set(Protobuf_INCLUDE_DIR ${Protobuf_IOS}/protobuf/platform/${Protobuf_IOS_PLATFORM}/include)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I${Protobuf_INCLUDE_DIR}")
     set(PROTOBUF_LITE_LIBRARY ${Protobuf_IOS}/protobuf/platform/universal/libprotobuf-lite.a)
     set(PROTOBUF_LITE_LIBRARIES ${Protobuf_IOS}/protobuf/platform/universal/libprotobuf-lite.a)
  endif()
  find_package(Protobuf REQUIRED)
endif()

if (IOS) 
  message(STATUS "IOS ------------------------------------")
  message(STATUS "Platform:               ${IOS_PLATFORM}")
  message(STATUS "OSX SYSROOT:            ${CMAKE_OSX_SYSROOT}")
endif()

message(STATUS "Dependencies---------------------------------")
message(STATUS "Protobuf Lite Libraries:${PROTOBUF_LITE_LIBRARIES}")
message(STATUS "Bundled protobuf: ${OT_BUNDLED_PROTOBUF}")
message(STATUS "Opentxs System Libraries: ${OPENTXS_SYSTEM_LIBRARIES}")

if(BUILD_TESTS AND NOT OT_BUNDLED_OPENTXS_PROTO)
  find_package(GTest REQUIRED)
  enable_testing()
endif()

if(PYTHON)
  find_package(PythonInterp)
  find_package(PythonLibs)
elseif(PYTHON3)
  find_package(PythonInterp 3 REQUIRED)
  find_package(PythonLibs 3 REQUIRED)
elseif(PYTHON2)
  find_package(PythonInterp 2.7 REQUIRED)
  find_package(PythonLibs 2.7 REQUIRED)
endif(PYTHON)

message(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
message(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
message(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")

#-----------------------------------------------------------------------------
# System libraries used for linking.

if(UNIX AND NOT APPLE)
  list(APPEND OPENTXS_SYSTEM_LIBRARIES dl)
  if(ANDROID)
    list(APPEND OPENTXS_SYSTEM_LIBRARIES log)
  else()
    list(APPEND OPENTXS_SYSTEM_LIBRARIES rt)
  endif()
endif()


#-----------------------------------------------------------------------------
# Force out-of-source build

if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
message(FATAL_ERROR "CMake generation is not allowed within the source directory!
Remove the CMakeCache.txt file and try again from another folder, e.g.:

   rm CMakeCache.txt
   mkdir build
   cd build
   cmake ..
")
endif()

#-----------------------------------------------------------------------------
# Use ccache

if (USE_CCACHE)
  find_program(CCACHE "ccache")
  if (CCACHE)
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "CCACHE_CPP2=yes ${CCACHE}")
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE})
  endif(CCACHE)
endif (USE_CCACHE)

#-----------------------------------------------------------------------------
# Default to Release build

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
endif()


#-----------------------------------------------------------------------------
# Source Definitions

if(WIN32)
    if(NOT IDC_STATIC)
        add_definitions(-DIDC_STATIC=-1)
    endif()

    add_definitions(-DOT_COMPANYNAME="Open Transactions Community")
    add_definitions(-DOT_PRODUCTNAME="Open Transactions")
    add_definitions(-DOT_PRODUCTVERSION="${VERSION_MAJOR},${VERSION_MINOR},${VERSION_BUGFIX},0")
    add_definitions(-DOT_API_NAME="Open Transactions Protobuf API")
    add_definitions(-DOT_LIBRARY_NAME="Open Transactions Protobuf Library")
    add_definitions(-DOT_PROMPT_NAME="Open Transactions Prompt")
endif()

#-----------------------------------------------------------------------------
# Build source

#Fix RPATH
if(APPLE)
    # use, i.e. don't skip the full RPATH for the build tree
    SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

    # when building, don't use the install RPATH already
    # (but later on when installing)
    SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")

    # add the automatically determined parts of the RPATH
    # which point to directories outside the build tree to the install RPATH
    SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

    # the RPATH to be used when installing, but only if it's not a system directory
    LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
    IF("${isSystemDir}" STREQUAL "-1")
    SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
    ENDIF("${isSystemDir}" STREQUAL "-1")
endif()

function(set_lib_property lib)
  if (NOT ANDROID)
    set_target_properties(${lib} PROPERTIES VERSION ${VERSION_STRING} SOVERSION ${VERSION_MAJOR})
  endif()
endfunction(set_lib_property)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(SYSTEM ${CMAKE_CURRENT_BINARY_DIR}/src)

add_subdirectory(src)

#-----------------------------------------------------------------------------
# Build Unit tests

if(GTEST_FOUND AND NOT OT_BUNDLED_OPENTXS_PROTO)
  add_subdirectory(tests)
endif()

#-----------------------------------------------------------------------------
# Produce a cmake-package

if((NOT ANDROID) AND (NOT OT_BUNDLED_OPENTXS_PROTO))
  include(CMakePackageConfigHelpers)
  set(CMAKE_CONFIG_DEST "${CMAKE_INSTALL_LIBDIR}/opentxs-proto")
  set(OPENTXS_PROTO_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")

  if(BUILD_SHARED_LIBS)
    set(OPENTXS_PROTO_LIBRARIES "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}opentxs-proto${CMAKE_SHARED_LIBRARY_SUFFIX}")
  else()
    set(OPENTXS_PROTO_LIBRARIES "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}opentxs-proto${CMAKE_STATIC_LIBRARY_PREFIX}")
  endif()

  configure_package_config_file(
         "cmake/opentxs-protoConfig.cmake.in"
         "${CMAKE_BINARY_DIR}/opentxs-protoConfig.cmake"
         INSTALL_DESTINATION ${CMAKE_CONFIG_DEST}
         PATH_VARS OPENTXS_PROTO_INCLUDE_DIRS OPENTXS_PROTO_LIBRARIES)

  write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/opentxs-protoConfigVersion.cmake"
    VERSION ${VERSION_STRING}
    COMPATIBILITY AnyNewerVersion)

  install(FILES
          "${CMAKE_CURRENT_BINARY_DIR}/opentxs-protoConfig.cmake"
          "${CMAKE_CURRENT_BINARY_DIR}/opentxs-protoConfigVersion.cmake"
          DESTINATION ${CMAKE_CONFIG_DEST}
          COMPONENT dev)

  install(EXPORT opentxs-proto-targets
          DESTINATION ${CMAKE_CONFIG_DEST})
endif()

#-----------------------------------------------------------------------------
# Produce a pkg-config file

string(REGEX REPLACE "^${CMAKE_INSTALL_PREFIX}(.*)" "\\1" LIB_INSTALL_DIR "${CMAKE_INSTALL_LIBDIR}")
configure_file("cmake/opentxs-proto.pc.in" "opentxs-proto.pc" @ONLY)
  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/opentxs-proto.pc"
          DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig"
          COMPONENT main)

#-----------------------------------------------------------------------------
# Install

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
        DESTINATION include
        COMPONENT dev
        FILES_MATCHING PATTERN "*.hpp")

install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/src/opentxs-proto/
        DESTINATION include/opentxs-proto
        COMPONENT dev
        FILES_MATCHING PATTERN "*.h")

#-----------------------------------------------------------------------------
# Uninstal
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/uninstall.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake"
    IMMEDIATE @ONLY)

if(NOT OT_BUNDLED_OPENTXS_PROTO)
  add_custom_target(uninstall
      COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/uninstall.cmake)
endif()
